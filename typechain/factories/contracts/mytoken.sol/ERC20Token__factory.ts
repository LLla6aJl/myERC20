/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC20Token,
  ERC20TokenInterface,
} from "../../../contracts/mytoken.sol/ERC20Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162002417380380620024178339818101604052810190620000379190620003b1565b8360009081620000489190620006a2565b5082600190816200005a9190620006a2565b5081600260006101000a81548160ff021916908360ff16021790555033600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900460ff1660ff16600a620000d891906200090c565b81620000e591906200095d565b600581905550600554600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600554604051620001939190620009b9565b60405180910390a350505050620009d6565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200020e82620001c3565b810181811067ffffffffffffffff8211171562000230576200022f620001d4565b5b80604052505050565b600062000245620001a5565b905062000253828262000203565b919050565b600067ffffffffffffffff821115620002765762000275620001d4565b5b6200028182620001c3565b9050602081019050919050565b60005b83811015620002ae57808201518184015260208101905062000291565b60008484015250505050565b6000620002d1620002cb8462000258565b62000239565b905082815260208101848484011115620002f057620002ef620001be565b5b620002fd8482856200028e565b509392505050565b600082601f8301126200031d576200031c620001b9565b5b81516200032f848260208601620002ba565b91505092915050565b600060ff82169050919050565b620003508162000338565b81146200035c57600080fd5b50565b600081519050620003708162000345565b92915050565b6000819050919050565b6200038b8162000376565b81146200039757600080fd5b50565b600081519050620003ab8162000380565b92915050565b60008060008060808587031215620003ce57620003cd620001af565b5b600085015167ffffffffffffffff811115620003ef57620003ee620001b4565b5b620003fd8782880162000305565b945050602085015167ffffffffffffffff811115620004215762000420620001b4565b5b6200042f8782880162000305565b935050604062000442878288016200035f565b925050606062000455878288016200039a565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004b457607f821691505b602082108103620004ca57620004c96200046c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005347fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004f5565b620005408683620004f5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005836200057d620005778462000376565b62000558565b62000376565b9050919050565b6000819050919050565b6200059f8362000562565b620005b7620005ae826200058a565b84845462000502565b825550505050565b600090565b620005ce620005bf565b620005db81848462000594565b505050565b5b818110156200060357620005f7600082620005c4565b600181019050620005e1565b5050565b601f82111562000652576200061c81620004d0565b6200062784620004e5565b8101602085101562000637578190505b6200064f6200064685620004e5565b830182620005e0565b50505b505050565b600082821c905092915050565b6000620006776000198460080262000657565b1980831691505092915050565b600062000692838362000664565b9150826002028217905092915050565b620006ad8262000461565b67ffffffffffffffff811115620006c957620006c8620001d4565b5b620006d582546200049b565b620006e282828562000607565b600060209050601f8311600181146200071a576000841562000705578287015190505b62000711858262000684565b86555062000781565b601f1984166200072a86620004d0565b60005b8281101562000754578489015182556001820191506020850194506020810190506200072d565b8683101562000774578489015162000770601f89168262000664565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200081757808604811115620007ef57620007ee62000789565b5b6001851615620007ff5780820291505b80810290506200080f85620007b8565b9450620007cf565b94509492505050565b60008262000832576001905062000905565b8162000842576000905062000905565b81600181146200085b576002811462000866576200089c565b600191505062000905565b60ff8411156200087b576200087a62000789565b5b8360020a91508482111562000895576200089462000789565b5b5062000905565b5060208310610133831016604e8410600b8410161715620008d65782820a905083811115620008d057620008cf62000789565b5b62000905565b620008e58484846001620007c5565b92509050818404811115620008ff57620008fe62000789565b5b81810290505b9392505050565b6000620009198262000376565b9150620009268362000376565b9250620009557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000820565b905092915050565b60006200096a8262000376565b9150620009778362000376565b9250828202620009878162000376565b91508282048414831517620009a157620009a062000789565b5b5092915050565b620009b38162000376565b82525050565b6000602082019050620009d06000830184620009a8565b92915050565b611a3180620009e66000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c5780639dc29fac116100665780639dc29fac14610261578063a457c2d71461027d578063a9059cbb146102ad578063dd62ed3e146102dd576100ea565b806370a08231146101f55780638da5cb5b1461022557806395d89b4114610243576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a957806340c10f19146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f761030d565b60405161010491906110fa565b60405180910390f35b610127600480360381019061012291906111b5565b61039b565b6040516101349190611210565b60405180910390f35b6101456103b2565b604051610152919061123a565b60405180910390f35b61017560048036038101906101709190611255565b6103bc565b6040516101829190611210565b60405180910390f35b610193610466565b6040516101a091906112c4565b60405180910390f35b6101c360048036038101906101be91906111b5565b610479565b6040516101d09190611210565b60405180910390f35b6101f360048036038101906101ee91906111b5565b610585565b005b61020f600480360381019061020a91906112df565b61075d565b60405161021c919061123a565b60405180910390f35b61022d6107a6565b60405161023a919061131b565b60405180910390f35b61024b6107cc565b60405161025891906110fa565b60405180910390f35b61027b600480360381019061027691906111b5565b61085a565b005b610297600480360381019061029291906111b5565b610aba565b6040516102a49190611210565b60405180910390f35b6102c760048036038101906102c291906111b5565b610c0f565b6040516102d49190611210565b60405180910390f35b6102f760048036038101906102f29190611336565b610c26565b604051610304919061123a565b60405180910390f35b6000805461031a906113a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610346906113a5565b80156103935780601f1061036857610100808354040283529160200191610393565b820191906000526020600020905b81548152906001019060200180831161037657829003601f168201915b505050505081565b60006103a8338484610cad565b6001905092915050565b6000600554905090565b60006103c9848484610e76565b61045b843384600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104569190611405565b610cad565b600190509392505050565b600260009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e0906114ab565b60405180910390fd5b61057b338484600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461057691906114cb565b610cad565b6001905092915050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c90611571565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067b906115dd565b60405180910390fd5b806005600082825461069691906114cb565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106ec91906114cb565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610751919061123a565b60405180910390a35050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600180546107d9906113a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610805906113a5565b80156108525780601f1061082757610100808354040283529160200191610852565b820191906000526020600020905b81548152906001019060200180831161083557829003601f168201915b505050505081565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e19061166f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610959576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095090611701565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d790611793565b60405180910390fd5b81600560008282546109f29190611405565b9250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a489190611405565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610aad919061123a565b60405180910390a3505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b21906114ab565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610bee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be590611825565b60405180910390fd5b610c0433858584610bff9190611405565b610cad565b600191505092915050565b6000610c1c338484610e76565b6001905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d13906118b7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d82906114ab565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610e69919061123a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc90611949565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4b906119db565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fa39190611405565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ff991906114cb565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161105d919061123a565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110a4578082015181840152602081019050611089565b60008484015250505050565b6000601f19601f8301169050919050565b60006110cc8261106a565b6110d68185611075565b93506110e6818560208601611086565b6110ef816110b0565b840191505092915050565b6000602082019050818103600083015261111481846110c1565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061114c82611121565b9050919050565b61115c81611141565b811461116757600080fd5b50565b60008135905061117981611153565b92915050565b6000819050919050565b6111928161117f565b811461119d57600080fd5b50565b6000813590506111af81611189565b92915050565b600080604083850312156111cc576111cb61111c565b5b60006111da8582860161116a565b92505060206111eb858286016111a0565b9150509250929050565b60008115159050919050565b61120a816111f5565b82525050565b60006020820190506112256000830184611201565b92915050565b6112348161117f565b82525050565b600060208201905061124f600083018461122b565b92915050565b60008060006060848603121561126e5761126d61111c565b5b600061127c8682870161116a565b935050602061128d8682870161116a565b925050604061129e868287016111a0565b9150509250925092565b600060ff82169050919050565b6112be816112a8565b82525050565b60006020820190506112d960008301846112b5565b92915050565b6000602082840312156112f5576112f461111c565b5b60006113038482850161116a565b91505092915050565b61131581611141565b82525050565b6000602082019050611330600083018461130c565b92915050565b6000806040838503121561134d5761134c61111c565b5b600061135b8582860161116a565b925050602061136c8582860161116a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806113bd57607f821691505b6020821081036113d0576113cf611376565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114108261117f565b915061141b8361117f565b9250828203905081811115611433576114326113d6565b5b92915050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611495602283611075565b91506114a082611439565b604082019050919050565b600060208201905081810360008301526114c481611488565b9050919050565b60006114d68261117f565b91506114e18361117f565b92508282019050808211156114f9576114f86113d6565b5b92915050565b7f45524332303a206d696e742063616e206f6e6c792062652063616c6c6564206260008201527f7920746865206f776e6572000000000000000000000000000000000000000000602082015250565b600061155b602b83611075565b9150611566826114ff565b604082019050919050565b6000602082019050818103600083015261158a8161154e565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006115c7601f83611075565b91506115d282611591565b602082019050919050565b600060208201905081810360008301526115f6816115ba565b9050919050565b7f45524332303a206275726e2063616e206f6e6c792062652063616c6c6564206260008201527f7920746865206f776e6572000000000000000000000000000000000000000000602082015250565b6000611659602b83611075565b9150611664826115fd565b604082019050919050565b600060208201905081810360008301526116888161164c565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006116eb602183611075565b91506116f68261168f565b604082019050919050565b6000602082019050818103600083015261171a816116de565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061177d602283611075565b915061178882611721565b604082019050919050565b600060208201905081810360008301526117ac81611770565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061180f602583611075565b915061181a826117b3565b604082019050919050565b6000602082019050818103600083015261183e81611802565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006118a1602483611075565b91506118ac82611845565b604082019050919050565b600060208201905081810360008301526118d081611894565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611933602583611075565b915061193e826118d7565b604082019050919050565b6000602082019050818103600083015261196281611926565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006119c5602383611075565b91506119d082611969565b604082019050919050565b600060208201905081810360008301526119f4816119b8565b905091905056fea26469706673582212209fdd611fd12b6f2e43f5292c7242c0d9abba19eb9f8fcfee87f8b74fe3c3945c64736f6c63430008120033";

type ERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Token__factory extends ContractFactory {
  constructor(...args: ERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Token> {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      initialSupply,
      overrides || {}
    ) as Promise<ERC20Token>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): ERC20Token {
    return super.attach(address) as ERC20Token;
  }
  override connect(signer: Signer): ERC20Token__factory {
    return super.connect(signer) as ERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TokenInterface {
    return new utils.Interface(_abi) as ERC20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Token {
    return new Contract(address, _abi, signerOrProvider) as ERC20Token;
  }
}
